import pandas as pd
import numpy as np
import json

# CSV beolvas√°sa
df = pd.read_csv('specific_indices_matrix.csv')

# PatientID oszlop elt√°vol√≠t√°sa
data = df.drop('PatientID', axis=1)

# Csak azokat a sorokat t√°vol√≠tjuk el, ahol MINDEN √©rt√©k NaN
data_clean = data.dropna(how='all')

# Korrel√°ci√≥s m√°trix sz√°m√≠t√°sa
correlation_matrix = data_clean.corr()

print("Korrel√°ci√≥s m√°trix sikeresen kisz√°m√≠tva!")
print(f"M√°trix m√©rete: {correlation_matrix.shape}")
print(f"Adatsorok sz√°ma: {len(data_clean)}")
print(f"Mutat√≥k sz√°ma: {len(data_clean.columns)}")

# Alapstatisztik√°k
print(f"\nKorrel√°ci√≥s statisztik√°k:")
print(f"√Åtlag korrel√°ci√≥ (diagon√°lis n√©lk√ºl): {correlation_matrix.values[np.triu_indices_from(correlation_matrix.values, k=1)].mean():.3f}")
print(f"Max korrel√°ci√≥ (diagon√°lis n√©lk√ºl): {correlation_matrix.values[np.triu_indices_from(correlation_matrix.values, k=1)].max():.3f}")
print(f"Min korrel√°ci√≥ (diagon√°lis n√©lk√ºl): {correlation_matrix.values[np.triu_indices_from(correlation_matrix.values, k=1)].min():.3f}")

# Korrel√°ci√≥s m√°trix ment√©se CSV form√°tumban
correlation_matrix.to_csv('correlation_matrix.csv')
print("\n‚úÖ Korrel√°ci√≥s m√°trix elmentve: correlation_matrix.csv")

# Adatok el≈ëk√©sz√≠t√©se a vizualiz√°ci√≥hoz
def prepare_for_visualization():
    """K√©sz√≠ti el≈ë az adatokat a JavaScript vizualiz√°ci√≥hoz"""
    
    # Korrel√°ci√≥s √©rt√©kek list√°v√° alak√≠t√°sa
    n = len(correlation_matrix.columns)
    data_list = []
    x_labels = []
    y_labels = []
    
    for i, row_name in enumerate(correlation_matrix.index):
        for j, col_name in enumerate(correlation_matrix.columns):
            data_list.append(correlation_matrix.iloc[i, j])
            x_labels.append(col_name)
            y_labels.append(row_name)
    
    # JSON objektum l√©trehoz√°sa
    viz_data = {
        'data': data_list,
        'x': x_labels,
        'y': y_labels,
        'metrics': list(correlation_matrix.columns),
        'shape': [n, n]
    }
    
    return viz_data

# Vizualiz√°ci√≥s adatok export√°l√°sa
viz_data = prepare_for_visualization()

# JSON f√°jlba ment√©s
with open('correlation_data.json', 'w', encoding='utf-8') as f:
    json.dump(viz_data, f, ensure_ascii=False, indent=2)

print("‚úÖ Vizualiz√°ci√≥s adatok elmentve: correlation_data.json")

# Top korrel√°ci√≥k keres√©se (diagon√°lis elemek n√©lk√ºl)
def find_top_correlations(correlation_matrix, n_top=10):
    """Megkeresi a leger≈ësebb korrel√°ci√≥kat"""
    
    # Fels≈ë h√°romsz√∂g m√°trix (diagon√°lis n√©lk√ºl)
    mask = np.triu(np.ones_like(correlation_matrix, dtype=bool), k=1)
    correlations = []
    
    for i in range(len(correlation_matrix.index)):
        for j in range(len(correlation_matrix.columns)):
            if mask[i, j] and not np.isnan(correlation_matrix.iloc[i, j]):
                correlations.append({
                    'metric1': correlation_matrix.index[i],
                    'metric2': correlation_matrix.columns[j],
                    'correlation': correlation_matrix.iloc[i, j]
                })
    
    # Rendez√©s abszol√∫t √©rt√©k szerint
    correlations.sort(key=lambda x: abs(x['correlation']), reverse=True)
    
    return correlations[:n_top]

# Top korrel√°ci√≥k megjelen√≠t√©se
print(f"\nüîù Top 10 leger≈ësebb korrel√°ci√≥:")
top_correlations = find_top_correlations(correlation_matrix, 10)

for i, corr in enumerate(top_correlations, 1):
    print(f"{i:2d}. {corr['metric1'][:30]:<30} ‚Üî {corr['metric2'][:30]:<30} | r = {corr['correlation']:6.3f}")

# Kateg√≥ri√°k szerinti csoportos√≠t√°s
def categorize_metrics(metrics):
    """Kategoriz√°lja a mutat√≥kat"""
    categories = {
        'Cardiac': [],
        'Endothelial': [],
        'Neurogenic': [],
        'Myogenic': [],
        'Respiratory': [],
        'VLF': [],
        'LF': [],
        'Global': []
    }
    
    for metric in metrics:
        if 'Cardiac' in metric:
            categories['Cardiac'].append(metric)
        elif 'Endothelial' in metric:
            categories['Endothelial'].append(metric)
        elif 'Neurogenic' in metric:
            categories['Neurogenic'].append(metric)
        elif 'Myogenic' in metric:
            categories['Myogenic'].append(metric)
        elif 'Respiratory' in metric:
            categories['Respiratory'].append(metric)
        elif 'VLF' in metric:
            categories['VLF'].append(metric)
        elif 'LF' in metric:
            categories['LF'].append(metric)
        else:
            categories['Global'].append(metric)
    
    return categories

# Kateg√≥ria statisztik√°k
categories = categorize_metrics(correlation_matrix.columns)
print(f"\nüìä Mutat√≥k kateg√≥ri√°k szerint:")
for cat, metrics in categories.items():
    if metrics:
        print(f"{cat:12s}: {len(metrics):3d} mutat√≥")

# Hi√°nyz√≥ adatok elemz√©se
print(f"\n‚ùå Hi√°nyz√≥ adatok elemz√©se:")
missing_data = data_clean.isnull().sum()
missing_data = missing_data[missing_data > 0].sort_values(ascending=False)

if len(missing_data) > 0:
    print(f"Hi√°nyz√≥ adatokat tartalmaz√≥ mutat√≥k sz√°ma: {len(missing_data)}")
    print("Top 5 legt√∂bb hi√°nyz√≥ adattal:")
    for metric, missing_count in missing_data.head().items():
        missing_pct = (missing_count / len(data_clean)) * 100
        print(f"  {metric[:50]:<50} | {missing_count:3d} hi√°nyz√≥ ({missing_pct:5.1f}%)")
else:
    print("Nincsenek hi√°nyz√≥ adatok a megtiszt√≠tott adathalmazban.")

print(f"\n‚ú® Minden f√°jl sikeresen l√©trehozva!")
print(f"üìÅ F√°jlok:")
print(f"   - correlation_matrix.csv      (teljes korrel√°ci√≥s m√°trix)")
print(f"   - correlation_data.json       (vizualiz√°ci√≥s adatok)")
print(f"\nüåê A HTML vizualiz√°ci√≥ megnyit√°s√°hoz t√∂ltsd be a correlation_data.json f√°jlt!")

# Opcion√°lis: Plotly heatmap l√©trehoz√°sa
try:
    import plotly.graph_objects as go
    import plotly.express as px
    
    # Egyszer≈± heatmap
    fig = go.Figure(data=go.Heatmap(
        z=correlation_matrix.values,
        x=correlation_matrix.columns,
        y=correlation_matrix.index,
        colorscale='RdBu',
        zmid=0,
        zmin=-1,
        zmax=1,
        colorbar=dict(title="Korrel√°ci√≥")
    ))
    
    fig.update_layout(
        title="Cerebr√°lis Autoregul√°ci√≥s Metrik√°k - Korrel√°ci√≥s M√°trix",
        xaxis_title="Mutat√≥k",
        yaxis_title="Mutat√≥k",
        width=1200,
        height=1200
    )
    
    # HTML f√°jlba ment√©s
    fig.write_html("correlation_heatmap_plotly.html")
    print(f"   - correlation_heatmap_plotly.html (Plotly heatmap)")
    
except ImportError:
    print("\nüìù Megjegyz√©s: Plotly nincs telep√≠tve. Ha szeretn√©d a Plotly verzi√≥t:")
    print("   pip install plotly")